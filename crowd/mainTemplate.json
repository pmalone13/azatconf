{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The Azure region/location where the artifacts will be deployed."
            },
            "minLength": 5
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The URL specifying the location of the installation artifacts."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The (optional) Shared Access Signature (SAS) token that provides access to resources in the storage account."
            }
        },
        "isMarketplaceDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "If these templates are being deployed via the Azure Marketplace."
            }
        },
        "crowdVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "The Crowd software product version to install. You can also specify 'latest' to download the latest version available. If using with customDownloadUrl you have to specify the correct version."
            }
        },
        "dbCreateNew": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Create a new database or attempt to use an existing specified database. Note that this has to be in same resource group and location as the target deployment."
            }
        },
        "dbType": {
            "type": "string",
            "allowedValues": [
                "Azure SQL DB",
                "Azure DB for PostgreSQL"
            ],
            "defaultValue": "Azure SQL DB",
            "metadata": {
                "description": "The database type."
            }
        },
        "crowdClusterSize": {
            "type": "string",
            "allowedValues": [
                "",
                "trial",
                "small",
                "medium",
                "large",
                "enterprise"
            ],
            "defaultValue": "",
            "metadata": {
                "description": "To use recommended hardware options for the Crowd installation choose a size. NB if selected all further Gateway, VM, DB size parameters will be IGNORED."
            }
        },
        "crowdAdminUserEmail": {
            "type": "string",
            "defaultValue": "admin@example.com",
            "minLength": 5,
            "metadata": {
                "description": "The email address of the Crowd Administrator user."
            }
        },
        "cname": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "This is the Canonical Name record (CNAME) for your organization. If you don't provide one, Azure will generate a random domain"
            }
        },
        "sslBase64EncodedPfxCertificate": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The certificate to be used for SSL termination on the Azure Application Gateway."
            }
        },
        "sslPfxCertificatePassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The certificate password to be used for SSL termination on the Azure Application Gateway."
            }
        },
        "sshKey": {
            "type": "string",
            "metadata": {
                "description": "The SSH public key to use to access the Jumpbox."
            },
            "minLength": 300
        },
        "sshUserName": {
            "type": "string",
            "minLength": 5,
            "defaultValue": "crowdadmin",
            "metadata": {
                "description": "The SSH username to use to access the Crowd nodes from the Jumpbox. Note that access to the Crowd nodes can only be made in this way."
            }
        },
        "dbHost": {
            "type": "string",
            "defaultValue": "AUTO-GENERATED",
            "metadata": {
                "description": "The hostname of database server to be used if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbPort": {
            "type": "string",
            "defaultValue": "1433",
            "metadata": {
                "description": "The database port to use if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbDatabase": {
            "type": "string",
            "defaultValue": "crddatabase",
            "metadata": {
                "description": "The database name to use if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbUsername": {
            "type": "string",
            "defaultValue": "crowdadmin",
            "metadata": {
                "description": "The username for the dedicated database user."
            }
        },
        "dbPassword": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
                "description": "The password for the dedicated database user."
            }
        },
        "dbTier": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium",
                "GeneralPurpose",
                "BusinessCritical"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "The database service tier. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "dbTierSize": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "S1",
                "S2",
                "S3",
                "S4",
                "S6",
                "S7",
                "S9",
                "S12",
                "P1",
                "P2",
                "P4",
                "P6",
                "P11",
                "P15",
                "GP_Gen4_1",
                "GP_Gen4_10",
                "GP_Gen4_16",
                "GP_Gen4_2",
                "GP_Gen4_24",
                "GP_Gen4_3",
                "GP_Gen4_4",
                "GP_Gen4_5",
                "GP_Gen4_6",
                "GP_Gen4_7",
                "GP_Gen4_8",
                "GP_Gen4_9",
                "GP_Gen5_10",
                "GP_Gen5_12",
                "GP_Gen5_14",
                "GP_Gen5_16",
                "GP_Gen5_18",
                "GP_Gen5_2",
                "GP_Gen5_20",
                "GP_Gen5_24",
                "GP_Gen5_32",
                "GP_Gen5_4",
                "GP_Gen5_40",
                "GP_Gen5_6",
                "GP_Gen5_8",
                "GP_Gen5_80",
                "BC_Gen4_1",
                "BC_Gen4_10",
                "BC_Gen4_16",
                "BC_Gen4_2",
                "BC_Gen4_24",
                "BC_Gen4_3",
                "BC_Gen4_4",
                "BC_Gen4_5",
                "BC_Gen4_6",
                "BC_Gen4_7",
                "BC_Gen4_8",
                "BC_Gen4_9",
                "BC_Gen5_10",
                "BC_Gen5_12",
                "BC_Gen5_14",
                "BC_Gen5_16",
                "BC_Gen5_18",
                "BC_Gen5_2",
                "BC_Gen5_20",
                "BC_Gen5_24",
                "BC_Gen5_32",
                "BC_Gen5_4",
                "BC_Gen5_40",
                "BC_Gen5_6",
                "BC_Gen5_8",
                "BC_Gen5_80"
            ],
            "defaultValue": "S2",
            "metadata": {
                "description": "The size of the database service tier. Basic, Standard (S1..S12) and Premium (P1..P15) tier sizes are available. Choose GP and BC SKUs for vCore model. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "clusterSize": {
            "type": "int",
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 1,
            "metadata": {
                "description": "The number of Crowd nodes in the cluster. Maximum is 6 nodes. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "clusterVmSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_D64s_v3",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_F2s",
                "Standard_F4s",
                "Standard_F8s",
                "Standard_F16s",
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E32s_v3",
                "Standard_E64s_v3",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_L16s",
                "Standard_L32s"
            ],
            "metadata": {
                "description": "The size of the virtual machine to use for each Crowd node in the cluster. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "linuxOsType": {
            "type": "string",
            "defaultValue": "Canonical:UbuntuServer:18.04-LTS",
            "allowedValues": [
                "Canonical:UbuntuServer:18.04-LTS",
                "Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2",
                "Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2",
                "RedHat:RHEL:7.5",
                "OpenLogic:CentOS:7.5",
                "credativ:Debian:9-backports"
            ],
            "metadata": {
                "description": "Select your preferred Linux OS type. Bear in mind, the Linux OS type has to support Accelerated Networking as well - https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-cli"
            }
        },
        "sharedHomeSizeInGb": {
            "type": "string",
            "defaultValue": "128",
            "metadata": {
                "description": "Shared Home File Share Size in GB"
            }
        },
        "clusterVmDiskSize": {
            "type": "int",
            "defaultValue": 1000,
            "metadata": {
                "description": "The desired size of the Cluster Node's allocation disk in GB"
            }
        },
        "clusterVmDiskCount": {
            "type": "int",
            "defaultValue": 8,
            "minValue": 1,
            "maxValue": 32,
            "metadata": {
                "description": "The requested Cluster Node disk will be striped for performance. Essentially the desired disk size will be divided by the clusterVmDiskCount and can't exceed 1023 GB. The clusterVmDiskCount count can't exceed the MaxDiskCount assigned to the VM Size."
            }
        },
        "appGtwyClusterSize": {
            "type": "int",
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 6,
            "metadata": {
                "description": "The number of nodes for the Application Gateway cluster. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "appGtwyTier": {
            "type": "string",
            "allowedValues": [
                "Standard_Small",
                "Standard_Medium",
                "Standard_Large"
            ],
            "defaultValue": "Standard_Medium",
            "metadata": {
                "description": "The Application Gateway size. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "postgresDbSku": {
            "type": "string",
            "defaultValue": "GP_Gen5_4",
            "allowedValues": [
                "GP_Gen5_2",
                "GP_Gen5_4",
                "GP_Gen5_8",
                "GP_Gen5_16",
                "GP_Gen5_32",
                "MO_Gen5_2",
                "MO_Gen5_4",
                "MO_Gen5_8",
                "MO_Gen5_16",
                "MO_Gen5_32"
            ],
            "metadata": {
                "description": "The SKU (Stock Keeping Unit) name of the PostgresSQL instance. Follows the convention {pricing tier}{compute generation}{vCores} eg General Purpose, Generation 5, 4 cores is GP_Gen5_4. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "postgresDbVersion": {
            "type": "string",
            "defaultValue": "9.6",
            "allowedValues": [
                "9.6",
                "10"
            ],
            "metadata": {
                "description": "The PostgresSQL DB version to use."
            }
        },
        "postgresDbStorage": {
            "type": "int",
            "defaultValue": 102400,
            "minValue": 102400,
            "maxValue": 4194304,
            "metadata": {
                "description": "The storage size of the PostgresSQL instance in MB. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "postgresDbCollation": {
            "type": "string",
            "defaultValue": "English_United States.1252",
            "metadata": {
                "description": "The collation of the PostgresSQL Managed Database."
            }
        },
        "jumpboxVmSize": {
            "type": "string",
            "defaultValue": "Standard_B1s",
            "metadata": {
                "description": "The size of the virtual machine to use for the Jumpbox. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "workspaceSku": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Free",
                "PerNode",
                "Standalone",
                "Standard",
                "Premium",
                "Unlimited",
                "PerGB2018"
            ],
            "metadata": {
                "description": "Workspace SKU Pricing Tier. Options depend upon when Azure Subscription created. If after 2018, use 'PerGB2018' otherwise 'Free'."
            }
        },
        "enableEmailAlerts": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable email alerts."
            }
        },
        "enableApplicationInsights": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable Azure Application Insights."
            }
        },
        "enableAnalytics": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable Azure Operational Insights."
            }
        },
        "enableAcceleratedNetworking": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable accelerated networking. Note that this needs to be on a supported instance type."
            }
        },
        "enablePremiumFiles": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Azure Premium Files."
            }
        },
        "nfsVmDataDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "Premium_LRS",
                "StandardSSD_LRS",
                "Standard_LRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "The disk type for the Data Disk of each node in the cluster."
            }
        }
    },
    "variables": {
        "namespace": "crd",
        "vpcTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-vpc.json', parameters('_artifactsLocationSasToken')))]",
        "crowdTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-crowd.json', parameters('_artifactsLocationSasToken')))]",
        "domainTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-domain.json', parameters('_artifactsLocationSasToken')))]",
        "alertsTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-alerts.json', parameters('_artifactsLocationSasToken')))]",
        "dbServerName": "[concat(variables('namespace'), if(equals(parameters('dbType'),'Azure SQL DB'),'sqlserver','postgres'), uniqueString(resourceGroup().id))]",
        "isCrowdClusterSizeUsed": "[not(empty(parameters('crowdClusterSize')))]",
        "clusterLookup": {
            "appGtwyTier": {
                "trial": "Standard_Small",
                "small": "Standard_Medium",
                "medium": "Standard_Medium",
                "large": "Standard_Large",
                "enterprise": "Standard_Large"
            },
            "appGtwySize": {
                "trial": 1,
                "small": 2,
                "medium": 2,
                "large": 4,
                "enterprise": 6
            },
            "dbTier": {
                "trial": "Basic",
                "small": "Standard",
                "medium": "Standard",
                "large": "Premium",
                "enterprise": "Premium"
            },
            "dbTierSize": {
                "trial": "Basic",
                "small": "S2",
                "medium": "S4",
                "large": "P4",
                "enterprise": "P6"
            },
            "postgresDbSku": {
                "trial": "GP_Gen5_2",
                "small": "GP_Gen5_2",
                "medium": "GP_Gen5_4",
                "large": "GP_Gen5_8",
                "enterprise": "MO_Gen5_8"
            },
            "postgresDbStorageSize": {
                "trial": 102400,
                "small": 102400,
                "medium": 256000,
                "large": 512000,
                "enterprise": 1024000
            },
            "clusterVmSize": {
                "trial": "Standard_DS2_v2",
                "small": "Standard_DS3_v2",
                "medium": "Standard_DS3_v2",
                "large": "Standard_DS4_v2",
                "enterprise": "Standard_DS5_v2"
            },
            "clusterSize": {
                "trial": 1,
                "small": 1,
                "medium": 1,
                "large": 1,
                "enterprise": 1
            },
            "jumpboxVmSize": {
                "trial": "Standard_B1s",
                "small": "Standard_B1s",
                "medium": "Standard_B1s",
                "large": "Standard_B1s",
                "enterprise": "Standard_B1s"
            },
            "sharedHomeSizeInGb": {
                "trial": "128",
                "small": "256",
                "medium": "5120",
                "large": "10240",
                "enterprise": "20480"
            },
            "nfsVmDataDiskType": {
                "value": "[parameters('nfsVmDataDiskType')]"
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2021-04-01",
            "name": "pid-b77fd591-c741-4f68-8f84-ad4bf07013ed-partnercenter",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "vpcTemplate",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vpcTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "jumpboxVmSize": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').jumpboxVmSize[parameters('crowdClusterSize')], parameters('jumpboxVmSize'))]"
                    },
                    "sshKey": {
                        "value": "[parameters('sshKey')]"
                    },
                    "sshUserName": {
                        "value": "[parameters('sshUserName')]"
                    },
                    "linuxOsType": {
                        "value": "[parameters('linuxOsType')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "crowdTemplate",
            "dependsOn": [
                "vpcTemplate"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('crowdTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "clusterSize": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), int(variables('clusterLookup').clusterSize[parameters('crowdClusterSize')]), parameters('clusterSize'))]"
                    },
                    "clusterVmSize": {
                        "value": "[if(and(not(parameters('isMarketplaceDeployment')), variables('isCrowdClusterSizeUsed')), variables('clusterLookup').clusterVmSize[parameters('crowdClusterSize')], parameters('clusterVmSize'))]"
                    },
                    "appGtwyClusterSize": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), int(variables('clusterLookup').appGtwySize[parameters('crowdClusterSize')]), parameters('appGtwyClusterSize'))]"
                    },
                    "appGtwyTier": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').appGtwyTier[parameters('crowdClusterSize')], parameters('appGtwyTier'))]"
                    },
                    "sshKey": {
                        "value": "[parameters('sshKey')]"
                    },
                    "sshUserName": {
                        "value": "[parameters('sshUserName')]"
                    },
                    "dbCreateNew": {
                        "value": "[parameters('dbCreateNew')]"
                    },
                    "dbTier": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').dbTier[parameters('crowdClusterSize')], parameters('dbTier'))]"
                    },
                    "dbTierSize": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').dbTierSize[parameters('crowdClusterSize')], parameters('dbTierSize'))]"
                    },
                    "postgresDbSku": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').postgresDbSku[parameters('crowdClusterSize')], parameters('postgresDbSku'))]"
                    },
                    "postgresDbVersion": {
                        "value": "[parameters('postgresDbVersion')]"
                    },
                    "postgresDbStorage": {
                        "value": "[if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').postgresDbStorageSize[parameters('crowdClusterSize')], parameters('postgresDbStorage'))]"
                    },
                    "postgresDbCollation": {
                        "value": "[parameters('postgresDbCollation')]"
                    },
                    "dbHost": {
                        "value": "[if(parameters('dbCreateNew'), variables('dbServerName'), parameters('dbHost'))]"
                    },
                    "dbType": {
                        "value": "[if(equals(parameters('dbType'), 'Azure SQL DB'), 'sqlserver', 'postgres')]"
                    },
                    "dbPort": {
                        "value": "[if(parameters('dbCreateNew'), if(equals(parameters('dbType'), 'Azure SQL DB'), '1433', '5432'), parameters('dbPort'))]"
                    },
                    "dbDatabase": {
                        "value": "[parameters('dbDatabase')]"
                    },
                    "dbUsername": {
                        "value": "[if(and(not(parameters('dbCreateNew')), equals(parameters('dbType'), 'Azure DB for PostgreSQL')), split(parameters('dbUsername'), '@')[0], parameters('dbUsername'))]"
                    },
                    "dbPassword": {
                        "value": "[parameters('dbPassword')]"
                    },
                    "vnetName": {
                        "value": "[reference('vpcTemplate').outputs.vnetName.value]"
                    },
                    "appSubnetName": {
                        "value": "[reference('vpcTemplate').outputs.appSubnetName.value]"
                    },
                    "gtwySubnetName": {
                        "value": "[reference('vpcTemplate').outputs.gtwySubnetName.value]"
                    },
                    "jumpboxPublicIpAddress": {
                        "value": "[reference('vpcTemplate').outputs.jumpboxPublicIpAddress.value]"
                    },
                    "crowdVersion": {
                        "value": "[parameters('crowdVersion')]"
                    },
                    "sslBase64EncodedPfxCertificate": {
                        "value": "[parameters('sslBase64EncodedPfxCertificate')]"
                    },
                    "sslPfxCertificatePassword": {
                        "value": "[parameters('sslPfxCertificatePassword')]"
                    },
                    "cname": {
                        "value": "[if(greater(length(parameters('cname')), 0), concat('crowd.', parameters('cname')), parameters('cname'))]"
                    },
                    "enableApplicationInsights": {
                        "value": "[parameters('enableApplicationInsights')]"
                    },
                    "enableAnalytics": {
                        "value": "[parameters('enableAnalytics')]"
                    },
                    "enableAcceleratedNetworking": {
                        "value": "[parameters('enableAcceleratedNetworking')]"
                    },
                    "workspaceSku": {
                        "value": "[ parameters('workspaceSku')]"
                    },
                    "clusterVmDiskSize": {
                        "value": "[parameters('clusterVmDiskSize')]"
                    },
                    "clusterVmDiskCount": {
                        "value": "[parameters('clusterVmDiskCount')]"
                    },
                    "linuxOsType": {
                        "value": "[parameters('linuxOsType')]"
                    },
                    "sharedHomeSizeInGb": {
                        "value": "[if(parameters('enablePremiumFiles'), if(variables('isCrowdClusterSizeUsed'), variables('clusterLookup').sharedHomeSizeInGb[parameters('crowdClusterSize')], parameters('sharedHomeSizeInGb')), '5120')]"
                    },
                    "enablePremiumFiles": {
                        "value": "[parameters('enablePremiumFiles')]"
                    },
                    "isMarketplaceDeployment": {
                        "value": "[parameters('isMarketplaceDeployment')]"
                    },
                    "jumpboxName": {
                        "value": "[reference('vpcTemplate').outputs.jumpboxName.value]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "domainTemplate",
            "dependsOn": [
                "crowdTemplate"
            ],
            "condition": "[greater(length(parameters('cname')), 0)]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('domainTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "cname": {
                        "value": "[parameters('cname')]"
                    },
                    "gtwyIpName": {
                        "value": "[reference('crowdTemplate').outputs.gtwyIpName.value]"
                    },
                    "prefix": {
                        "value": "crowd"
                    }
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "alertsTemplate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[parameters('enableEmailAlerts')]",
            "dependsOn": [
                "crowdTemplate"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('alertsTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "adminUserEmail": {
                        "value": "[parameters('crowdAdminUserEmail')]"
                    },
                    "gtwyName": {
                        "value": "[reference('crowdTemplate').outputs.gtwyName.value]"
                    },
                    "storageAccountName": {
                        "value": "[reference('crowdTemplate').outputs.storageAccountName.value]"
                    },
                    "clusterName": {
                        "value": "[reference('crowdTemplate').outputs.clusterName.value]"
                    },
                    "appInsightsName": {
                        "value": "[if(parameters('enableApplicationInsights'), reference('crowdTemplate').outputs.appInsightsName.value, '')]"
                    },
                    "statusCheckUrl": {
                        "value": "[uri(if(not(empty(parameters('sslBase64EncodedPfxCertificate'))), concat('https://', if(greater(length(parameters('cname')), 0), reference('domainTemplate').outputs.alias.value, reference('crowdTemplate').outputs.crowdAppEndPoint.value)), concat('http://', if(greater(length(parameters('cname')), 0), reference('domainTemplate').outputs.alias.value, reference('crowdTemplate').outputs.crowdAppEndPoint.value))), '/status')]"
                    },
                    "dbType": {
                        "value": "[if(equals(parameters('dbType'), 'Azure SQL DB'), 'sqlserver', 'postgres')]"
                    },
                    "isDbVCoreModel": {
                        "value": "[contains('GeneralPurpose, BusinessCritical', parameters('dbTier'))]"
                    },
                    "dbDatabaseServerName": {
                        "value": "[split(reference('crowdTemplate').outputs.dbDatabaseServerName.value, '.')[0]]"
                    },
                    "dbDatabaseName": {
                        "value": "[reference('crowdTemplate').outputs.dbDatabaseName.value]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "appEndpoint": {
            "type": "string",
            "value": "[if(not(empty(parameters('sslBase64EncodedPfxCertificate'))), concat('https://', if(greater(length(parameters('cname')), 0), reference('domainTemplate').outputs.alias.value, reference('crowdTemplate').outputs.crowdAppEndPoint.value)), concat('http://', if(greater(length(parameters('cname')), 0), reference('domainTemplate').outputs.alias.value, reference('crowdTemplate').outputs.crowdAppEndPoint.value)))]"
        },
        "bastionUrl": {
            "type": "string",
            "value": "[reference('vpcTemplate').outputs.jumpboxPublicEndpoint.value]"
        },
        "sshUrl": {
            "type": "string",
            "value": "[reference('vpcTemplate').outputs.sshServer.value]"
        },
        "jdbcUrl": {
            "type": "string",
            "value": "[reference('crowdTemplate').outputs.jdbcUrl.value]"
        },
        "appInsightsName": {
            "type": "string",
            "value": "[reference('crowdTemplate').outputs.appInsightsName.value]"
        }
    }
}