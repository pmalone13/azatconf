{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "metadata": {
                "description": "The region where Azure will house the deployment."
            },
            "minLength": 5
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The URL specifying the location of the installation files."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The Shared Access Signature (SAS) token that provides access to resources in the storage account."
            }
        },
        "appEndpoint": {
            "type": "string"
        },
        "dbCreateNew": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Create a new database or attempt to use an existing specified database. Note that this has to be in same resource group and location as the target deployment."
            }
        },
        "dbType": {
            "type": "string",
            "allowedValues": [
                "sqlserver",
                "postgres"
            ],
            "defaultValue": "sqlserver",
            "metadata": {
                "description": "The database type."
            }
        },
        "clusterSize": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 6,
            "metadata": {
                "description": "The number of Crowd nodes in the cluster"
            }
        },
        "clusterVmSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "metadata": {
                "description": "The size of the virtual machine used for each Crowd node."
            }
        },
        "sshKey": {
            "type": "string",
            "metadata": {
                "description": "The SSH public key to use to access the Jumpbox."
            },
            "minLength": 300
        },
        "sshUserName": {
            "type": "string",
            "defaultValue": "crowdadmin",
            "metadata": {
                "description": "The username used to SSH into each Crowd node from the jumpbox."
            }
        },
        "dbPort": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('dbType'), 'sqlserver'), '1433', if(equals(parameters('dbType'), 'postgres'), '5432', '3306'))]",
            "metadata": {
                "description": "The database port to use if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbDatabase": {
            "type": "string",
            "defaultValue": "crowd",
            "metadata": {
                "description": "The database name to use if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbHost": {
            "type": "string",
            "metadata": {
                "description": "The hostname of the database instance"
            }
        },
        "dbUsername": {
            "type": "string",
            "metadata": {
                "description": "The username for the dedicated database user."
            }
        },
        "dbPassword": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
                "description": "The password for the dedicated database user."
            }
        },
        "vnetName": {
            "type": "string"
        },
        "appSubnetName": {
            "type": "string"
        },
        "appInsightsInstrumentKey": {
            "type": "string",
            "defaultValue": ""
        },
        "gtwyName": {
            "type": "string"
        },
        "gtwyAddressPoolName": {
            "type": "string"
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The storage account name."
            }
        },
        "sharedHomeName": {
            "type": "string",
            "metadata": {
                "description": "The shared home file share name."
            }
        },
        "storageAccessKey": {
            "type": "securestring"
        },
        "storageFilesEndpoint": {
            "type": "string"
        },
        "enableAcceleratedNetworking": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable accelerated networking? Needs to be a supported instance type."
            }
        },
        "workspaceId": {
            "type": "string"
        },
        "workspacePrimaryKey": {
            "type": "securestring"
        },
        "workspaceSecondaryKey": {
            "type": "securestring"
        },
        "dbTierSize": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "S1",
                "S2",
                "S3",
                "S4",
                "S6",
                "S7",
                "S9",
                "S12",
                "P1",
                "P2",
                "P4",
                "P6",
                "P11",
                "P15",
                "GP_Gen4_1",
                "GP_Gen4_10",
                "GP_Gen4_16",
                "GP_Gen4_2",
                "GP_Gen4_24",
                "GP_Gen4_3",
                "GP_Gen4_4",
                "GP_Gen4_5",
                "GP_Gen4_6",
                "GP_Gen4_7",
                "GP_Gen4_8",
                "GP_Gen4_9",
                "GP_Gen5_10",
                "GP_Gen5_12",
                "GP_Gen5_14",
                "GP_Gen5_16",
                "GP_Gen5_18",
                "GP_Gen5_2",
                "GP_Gen5_20",
                "GP_Gen5_24",
                "GP_Gen5_32",
                "GP_Gen5_4",
                "GP_Gen5_40",
                "GP_Gen5_6",
                "GP_Gen5_8",
                "GP_Gen5_80",
                "BC_Gen4_1",
                "BC_Gen4_10",
                "BC_Gen4_16",
                "BC_Gen4_2",
                "BC_Gen4_24",
                "BC_Gen4_3",
                "BC_Gen4_4",
                "BC_Gen4_5",
                "BC_Gen4_6",
                "BC_Gen4_7",
                "BC_Gen4_8",
                "BC_Gen4_9",
                "BC_Gen5_10",
                "BC_Gen5_12",
                "BC_Gen5_14",
                "BC_Gen5_16",
                "BC_Gen5_18",
                "BC_Gen5_2",
                "BC_Gen5_20",
                "BC_Gen5_24",
                "BC_Gen5_32",
                "BC_Gen5_4",
                "BC_Gen5_40",
                "BC_Gen5_6",
                "BC_Gen5_8",
                "BC_Gen5_80"
            ],
            "defaultValue": "S2",
            "metadata": {
                "description": "The size of the database service tier. Basic, Standard (S1..S12) and Premium (P1..P15) tier sizes are available. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "postgresDbSku": {
            "type": "string",
            "defaultValue": "GP_Gen5_4",
            "allowedValues": [
                "GP_Gen5_2",
                "GP_Gen5_4",
                "GP_Gen5_8",
                "GP_Gen5_16",
                "GP_Gen5_32",
                "MO_Gen5_2",
                "MO_Gen5_4",
                "MO_Gen5_8",
                "MO_Gen5_16",
                "MO_Gen5_32"
            ],
            "metadata": {
                "description": "The SKU (Stock Keeping Unit) name of the PostgresSQL instance. Follows the convention {pricing tier}{compute generation}{vCores} eg General Purpose, Generation 5, 4 cores is GP_Gen5_4. Note that if the 'crowdClusterSize' parameter is used this value will be ignored."
            }
        },
        "clusterVmDiskSize": {
            "type": "int",
            "defaultValue": 1000,
            "metadata": {
                "description": "The desired size of the Cluster Node's allocation disk in GB"
            }
        },
        "clusterVmDiskCount": {
            "type": "int",
            "defaultValue": 8,
            "minValue": 8,
            "maxValue": 32,
            "metadata": {
                "description": "The requested Cluster Node disk will be striped for performance. Essentially the desired disk size will be divided by the clusterVmDiskCount and can't exceed 1023 GB. The clusterVmDiskCount count can't exceed the MaxDiskCount assigned to the VM Size."
            }
        },
        "linuxOsType": {
            "type": "string",
            "defaultValue": "Canonical:UbuntuServer:18.04-LTS",
            "allowedValues": [
                "Canonical:UbuntuServer:18.04-LTS",
                "Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2",
                "Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2",
                "RedHat:RHEL:7.5",
                "OpenLogic:CentOS:7.5",
                "credativ:Debian:9-backports"
            ],
            "metadata": {
                "description": "Select your preferred Linux OS type. Bear in mind, the Linux OS type has to support Accelerated Networking as well - https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-cli"
            }
        },
        "diagnosticsBlobStorageUri": {
            "type": "string"
        },
        "clusterVmDataDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "Premium_LRS",
                "StandardSSD_LRS",
                "Standard_LRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "The disk type for the Data Disk of each node in the cluster."
            }
        },
        "sslBase64EncodedPfxCertificate": {
            "type": "string",
            "defaultValue": ""
        },
        "crowdVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "The Crowd software product version to install. By default the deployment will download and use the latest version published."
            }
        },
        "isMarketplaceDeployment": {
            "type": "bool"
        },
        "jumpboxName": {
            "type": "string"
        }

    },
    "variables": {
        "namespace": "crd",
        "isMsSql": "[equals(parameters('dbType'), 'sqlserver')]",
        "crowd": {
            "database": {
                "host": "[if(variables('isMsSql'), concat(parameters('dbHost'), '.database', '.windows.net'), concat(parameters('dbHost'), '.postgres.database.azure.com'))]"
            },
            "cluster": {
                "name": "[concat(variables('namespace'), 'cluster')]",
                "tier": "Standard",
                "capacity": "[parameters('clusterSize')]",
                "vm": {
                    "size": "[parameters('clusterVmSize')]",
                    "image": {
                        "publisher": "[split(parameters('linuxOsType'), ':')[0]]",
                        "offer": "[split(parameters('linuxOsType'), ':')[1]]",
                        "sku": "[split(parameters('linuxOsType'), ':')[2]]",
                        "version": "latest"
                    },
                    "osdisk": {
                        "name": "[concat(variables('namespace'), 'cluster', 'disk')]",
                        "type": "[parameters('clusterVmDataDiskType')]",
                        "size": "100"
                    },
                    "datadisk": {
                        "type": "[parameters('clusterVmDataDiskType')]",
                        "caching": "ReadWrite",
                        "size": "[if(greater(div(parameters('clusterVmDiskSize'), parameters('clusterVmDiskCount')), 1020), 1020, div(parameters('clusterVmDiskSize'), parameters('clusterVmDiskCount')))]"
                    }
                }
            },
            "license": "AAABHg0ODAoPeNplUNtKw0AQfe9XLPickotaKSwYk2ALuRTbeHkc14kuJJswuwmtX2+aLdTq6zkz53aVtYoVwrDAZd5ieXO39K5ZmMQ75rveYiZaVc2jVhkQJslA1hw+GqnucQ9NV+NctI29GXk5IDfUowU2QEYh5dAgt0gMBiJUBunXWSoFKo27Q4fTaVRkWfIUrcPU8gV9gpIajGwVD00NWktQlksGqHvLnAXHkKOFAiUw2XeSDqMt8k0Q3K5mW6QBaR3zh8f0zSmf3Rfn1Q9zZ+WXW/ud9807UlGVGklzxzt16Ul8gcZJ6riL47lO4F40+GdmO6MWJLsp4zkuq+0Pq1pix1mY3YWNVPjdE17sPu0yzX6CCSeVv2l+ADS1nIEwLAIUYrE66+LiEoBSjmLEkXQfICx+OWgCFBGV5jXbxAkFBPrUt2XQVCBu7lybX02ee"
        },
        "lookup": {
            "sqlDbTierToMaxConnections": {
                "Basic": 30,
                "S0": 60,
                "S1": 90,
                "S2": 120,
                "S3": 200,
                "S4": 400,
                "S6": 800,
                "S7": 1600,
                "S9": 3200,
                "S12": 6000,
                "P1": 200,
                "P2": 400,
                "P4": 800,
                "P6": 1600,
                "P11": 2400,
                "P15": 6400,
                "GP_Gen4_1": 200,
                "GP_Gen4_2": 400,
                "GP_Gen4_3": 600,
                "GP_Gen4_4": 800,
                "GP_Gen4_5": 1000,
                "GP_Gen4_6": 1200,
                "GP_Gen4_7": 1400,
                "GP_Gen4_8": 1600,
                "GP_Gen4_9": 1800,
                "GP_Gen4_10": 2000,
                "GP_Gen4_16": 3200,
                "GP_Gen4_24": 4800,
                "GP_Gen5_2": 200,
                "GP_Gen5_4": 400,
                "GP_Gen5_6": 600,
                "GP_Gen5_8": 800,
                "GP_Gen5_10": 1000,
                "GP_Gen5_12": 1200,
                "GP_Gen5_14": 1400,
                "GP_Gen5_16": 1600,
                "GP_Gen5_18": 1800,
                "GP_Gen5_20": 2000,
                "GP_Gen5_24": 2400,
                "GP_Gen5_32": 3200,
                "GP_Gen5_40": 4000,
                "GP_Gen5_80": 8000,
                "BC_Gen4_1": 200,
                "BC_Gen4_2": 400,
                "BC_Gen4_3": 600,
                "BC_Gen4_4": 800,
                "BC_Gen4_5": 1000,
                "BC_Gen4_6": 1200,
                "BC_Gen4_7": 1400,
                "BC_Gen4_8": 1600,
                "BC_Gen4_9": 1800,
                "BC_Gen4_10": 2000,
                "BC_Gen4_16": 3200,
                "BC_Gen4_24": 4800,
                "BC_Gen5_2": 200,
                "BC_Gen5_4": 400,
                "BC_Gen5_6": 600,
                "BC_Gen5_8": 800,
                "BC_Gen5_10": 1000,
                "BC_Gen5_12": 1200,
                "BC_Gen5_14": 1400,
                "BC_Gen5_16": 1600,
                "BC_Gen5_18": 1800,
                "BC_Gen5_20": 2000,
                "BC_Gen5_24": 2400,
                "BC_Gen5_32": 3200,
                "BC_Gen5_40": 4000,
                "BC_Gen5_80": 8000
            },
            "postgresTierToMaxConnections": {
                "GP_Gen5_2": 140,
                "GP_Gen5_4": 240,
                "GP_Gen5_8": 470,
                "GP_Gen5_16": 940,
                "GP_Gen5_32": 1490,
                "MO_Gen5_2": 1890,
                "MO_Gen5_4": 490,
                "MO_Gen5_8": 950,
                "MO_Gen5_16": 1890,
                "MO_Gen5_32": 1890
            }
        },
        "c3p0Settings": {
            "maxConnections": "[if(equals(parameters('dbType'), 'sqlserver'), div(variables('lookup').sqlDbTierToMaxConnections[parameters('dbTierSize')], parameters('clusterSize')), div(variables('lookup').postgresTierToMaxConnections[parameters('postgresDbSku')], parameters('clusterSize')))]"
        },
        "httpSettings": {
            "dbConnectionsMinus20Percent": "[div(mul(variables('c3p0Settings').maxConnections, 80),100)]",
            "dbConnectionsMinus10": "[sub(variables('c3p0Settings').maxConnections, 10)]"
        },
        "env": {
            "settings": [
                {
                    "name": "AZURE_STORAGE_ACCOUNT",
                    "value": "[parameters('storageAccountName')]"
                },
                {
                    "name": "AZURE_STORAGE_KEY",
                    "value": "[parameters('storageAccessKey')]"
                },
                {
                    "name": "ATL_CROWD_SHARED_HOME_NAME",
                    "value": "[parameters('sharedHomeName')]"
                },
                {
                    "name": "ATL_TOMCAT_DEFAULTCONNECTORPORT",
                    "value": "8080"
                },
                {
                    "name": "ATL_DB_ENGINE",
                    "value": "[if(equals(parameters('dbType'), 'sqlserver'), 'azure_sql', 'rds_postgres')]"
                },
                {
                    "name": "ATL_DB_PORT",
                    "value": "[if(parameters('dbCreateNew'), if(equals(parameters('dbType'), 'sqlserver'), '1433', '5432'), parameters('dbPort'))]"
                },
                {
                    "name": "ATL_DB_ROOT_DB_NAME",
                    "value": "[if(equals(parameters('dbType'), 'sqlserver'), 'master', 'postgres')]"
                },
                {
                    "name": "JDBC_USER",
                    "value": "[parameters('dbUsername')]"
                },
                {
                    "name": "JDBC_PASSWORD",
                    "value": "[parameters('dbPassword')]"
                },
                {
                    "name": "ATL_JDBC_DB_NAME",
                    "value": "[parameters('dbDatabase')]"
                },
                {
                    "name": "ATL_JDBC_USER",
                    "value": "crowddbuser"
                },
                {
                    "name": "ATL_JDBC_PASSWORD",
                    "value": "[parameters('dbPassword')]"
                },
                {
                    "name": "ATL_DB_HOST",
                    "value": "[variables('crowd').database.host]"
                },
                {
                    "name": "ATL_DB_ROOT_USER",
                    "value": "[parameters('dbUsername')]"
                },
                {
                    "name": "ATL_DB_ROOT_PASSWORD",
                    "value": "[parameters('dbPassword')]"
                },
                {
                    "name": "APPINSIGHTS_INSTRUMENTATION_KEY",
                    "value": "[parameters('appInsightsInstrumentKey')]"
                },
                {
                    "name": "OMS_WORKSPACE_ID",
                    "value": "[parameters('workspaceId')]"
                },
                {
                    "name": "OMS_PRIMARY_KEY",
                    "value": "[parameters('workspacePrimaryKey')]"
                },
                {
                    "name": "OMS_SECONDARY_KEY",
                    "value": "[parameters('workspaceSecondaryKey')]"
                },
                {
                    "name": "ATL_TOMCAT_SECURE",
                    "value": "false"
                },
                {
                    "name": "AZURE_APP_ENDPOINT",
                    "value": "[parameters('appEndpoint')]"
                },
                {
                    "name": "ATL_TOMCAT_REDIRECTPORT",
                    "value": "8443"
                },
                {
                    "name": "ATL_TOMCAT_PROXYPORT",
                    "value": "[if(variables('isSslSpecified'), '443', '80')]"
                },
                {
                    "name": "ATL_TOMCAT_DEFAULTCONNECTORPORT",
                    "value": "8080"
                },
                {
                    "name": "ATL_PROXY_NAME",
                    "value": "[parameters('appEndpoint')]"
                },
                {
                    "name": "ATL_PRODUCT_VERSION",
                    "value": "[parameters('crowdVersion')]"
                }
            ]
        },

        "isSslSpecified": "[not(empty(parameters('sslBase64EncodedPfxCertificate')))]",
        "confProvisionCmd": "[concat('FILE_STORE_URL_DOMAIN=\"', parameters('storageFilesEndpoint'), '\" ', './provision_install.sh')]",
        "crowdInstallCmd": "[concat('FILE_STORE_URL_DOMAIN=\"', parameters('storageFilesEndpoint'), '\" ', './prepare_install.sh ', base64(string(variables('env').settings)), ' 2>&1 > /var/log/crowd.install-$(uname -n).log')]"
    },
    "resources": [
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2022-03-01",
            "name": "[concat(parameters('jumpboxName'), '/provision-install-script')]",
            "condition": "[not(parameters('isMarketplaceDeployment'))]",
            "location": "[parameters('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[uri(parameters('_artifactsLocation'), concat('scripts/provision_install.sh', parameters('_artifactsLocationSasToken')))]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[variables('confProvisionCmd')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[variables('crowd').cluster.name]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('jumpboxName'), 'provision-install-script')]"
            ],
            "apiVersion": "2022-03-01",
            "sku": {
                "name": "[variables('crowd').cluster.vm.size]",
                "tier": "[variables('crowd').cluster.tier]",
                "capacity": "[variables('crowd').cluster.capacity]"
            },
            "properties": {
                "overprovision": false,
                "singlePlacementGroup": false,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "crowdnode-",
                        "adminUsername": "[parameters('sshUserName')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[concat('/home/', parameters('sshUserName'), '/.ssh/authorized_keys')]",
                                        "keyData": "[parameters('sshKey')]"
                                    }
                                ]
                            }
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
                            "publisher": "[variables('crowd').cluster.vm.image.publisher]",
                            "offer": "[variables('crowd').cluster.vm.image.offer]",
                            "sku": "[variables('crowd').cluster.vm.image.sku]",
                            "version": "[variables('crowd').cluster.vm.image.version]"
                        },
                        "osDisk": {
                            "managedDisk": {
                                "storageAccountType": "[variables('crowd').cluster.vm.osdisk.type]"
                            },
                            "diskSizeGB": "[variables('crowd').cluster.vm.osdisk.size]",
                            "createOption": "FromImage"
                        },
                        "copy": [
                            {
                                "name": "dataDisks",
                                "count": "[parameters('clusterVmDiskCount')]",
                                "input": {
                                    "lun": "[copyIndex('dataDisks')]",
                                    "caching": "[variables('crowd').cluster.vm.datadisk.caching]",
                                    "createOption": "Empty",
                                    "diskSizeGB": "[variables('crowd').cluster.vm.datadisk.size]",
                                    "managedDisk": {
                                        "storageAccountType": "[variables('crowd').cluster.vm.datadisk.type]"
                                    }
                                }
                            }
                        ]
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[concat(variables('namespace'), 'scaleset-nic')]",
                                "properties": {
                                    "primary": true,
                                    "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(variables('namespace'), 'scalset-ipconfig')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('appSubnetName'))]"
                                                },
                                                "ApplicationGatewayBackendAddressPools": [
                                                    {
                                                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('gtwyName'), parameters('gtwyAddressPoolName'))]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[parameters('diagnosticsBlobStorageUri')]"
                        }
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "crowd-install-script",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "type": "CustomScript",
                                    "typeHandlerVersion": "2.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "fileUris": [
                                            "[uri(parameters('_artifactsLocation'), concat('scripts/prepare_install.sh', parameters('_artifactsLocationSasToken')))]",
                                            "[uri(parameters('_artifactsLocation'), concat('scripts/ansible.zip', parameters('_artifactsLocationSasToken')))]"
                                        ]
                                    },
                                    "protectedSettings": {
                                        "commandToExecute": "[variables('crowdInstallCmd')]"
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "outputs": {
        "clusterName": {
            "type": "string",
            "value": "[variables('crowd').cluster.name]"
        },
        "installConfCmdArgs": {
            "type": "string",
            "value": "[variables('crowdInstallCmd')]"
        },
        "maxDbConnections": {
            "type": "string",
            "value": "[string(variables('c3p0Settings').maxConnections)]"
        },
        "maxHttpThreads": {
            "type": "int",
            "value": "[if(less(variables('httpSettings').dbConnectionsMinus20Percent, variables('httpSettings').dbConnectionsMinus10), variables('httpSettings').dbConnectionsMinus20Percent, variables('httpSettings').dbConnectionsMinus10)]"
        },
        "vmmsSingleDiskSizeGB": {
            "type": "int",
            "value": "[variables('crowd').cluster.vm.datadisk.size]"
        }
    }
}
