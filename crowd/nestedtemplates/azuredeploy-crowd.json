{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "metadata": {
                "description": "The Azure region/location where the artifacts will be deployed."
            },
            "minLength": 5
        },
        "isMarketplaceDeployment": {
            "type": "bool"
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The URL specifying the location of the installation artifacts."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The (optional) Shared Access Signature (SAS) token that provides access to resources in the storage account."
            }
        },
        "crowdVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "The Crowd software product version to install. By default the deployment will download and use the latest version published."
            }
        },
        "dbCreateNew": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Create a new database or attempt to use an existing specified database. Note that this has to be in same resource group and location as the target deployment."
            }
        },
        "dbType": {
            "type": "string",
            "allowedValues": [
                "sqlserver",
                "postgres"
            ],
            "defaultValue": "sqlserver",
            "metadata": {
                "description": "The database type."
            }
        },
        "cname": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "This is the Canonical Name record (CNAME) for your organization. If you don't provide one, Azure will generate a random sub domain for your instance."
            }
        },
        "sslBase64EncodedPfxCertificate": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The certificate to be used for SSL termination on the Azure Application Gateway."
            }
        },
        "sslPfxCertificatePassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The certificate password to be used for SSL termination on the Azure Application Gateway."
            }
        },
        "sshKey": {
            "type": "string",
            "metadata": {
                "description": "The SSH public key to use to access the Jumpbox."
            },
            "minLength": 300
        },
        "sshUserName": {
            "type": "string",
            "defaultValue": "crowdadmin",
            "metadata": {
                "description": "The SSH username to use to access the Crowd nodes from the Jumpbox. Note that access to the Crowd nodes can only be made in this way."
            }
        },
        "dbHost": {
            "type": "string",
            "defaultValue": "AUTO-GENERATED",
            "metadata": {
                "description": "The hostname of database server to be used if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbPort": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('dbType'), 'sqlserver'), '1433', if(equals(parameters('dbType'), 'postgres'), '5432', '3306'))]",
            "metadata": {
                "description": "The database port to use if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbDatabase": {
            "type": "string",
            "defaultValue": "crddatabase",
            "metadata": {
                "description": "The database name to use if an external database is being used. This will be autogenerated if a new database is to be created."
            }
        },
        "dbUsername": {
            "type": "string",
            "defaultValue": "crowddbuser",
            "metadata": {
                "description": "The username for the dedicated database user."
            }
        },
        "dbPassword": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
                "description": "The password for the dedicated database user."
            }
        },
        "dbTier": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium",
                "GeneralPurpose",
                "BusinessCritical"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "The database service tier. "
            }
        },
        "dbTierSize": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "S1",
                "S2",
                "S3",
                "S4",
                "S6",
                "S7",
                "S9",
                "S12",
                "P1",
                "P2",
                "P4",
                "P6",
                "P11",
                "P15",
                "GP_Gen4_1",
                "GP_Gen4_10",
                "GP_Gen4_16",
                "GP_Gen4_2",
                "GP_Gen4_24",
                "GP_Gen4_3",
                "GP_Gen4_4",
                "GP_Gen4_5",
                "GP_Gen4_6",
                "GP_Gen4_7",
                "GP_Gen4_8",
                "GP_Gen4_9",
                "GP_Gen5_10",
                "GP_Gen5_12",
                "GP_Gen5_14",
                "GP_Gen5_16",
                "GP_Gen5_18",
                "GP_Gen5_2",
                "GP_Gen5_20",
                "GP_Gen5_24",
                "GP_Gen5_32",
                "GP_Gen5_4",
                "GP_Gen5_40",
                "GP_Gen5_6",
                "GP_Gen5_8",
                "GP_Gen5_80",
                "BC_Gen4_1",
                "BC_Gen4_10",
                "BC_Gen4_16",
                "BC_Gen4_2",
                "BC_Gen4_24",
                "BC_Gen4_3",
                "BC_Gen4_4",
                "BC_Gen4_5",
                "BC_Gen4_6",
                "BC_Gen4_7",
                "BC_Gen4_8",
                "BC_Gen4_9",
                "BC_Gen5_10",
                "BC_Gen5_12",
                "BC_Gen5_14",
                "BC_Gen5_16",
                "BC_Gen5_18",
                "BC_Gen5_2",
                "BC_Gen5_20",
                "BC_Gen5_24",
                "BC_Gen5_32",
                "BC_Gen5_4",
                "BC_Gen5_40",
                "BC_Gen5_6",
                "BC_Gen5_8",
                "BC_Gen5_80"
            ],
            "defaultValue": "S2",
            "metadata": {
                "description": "The size of the database service tier. Basic, Standard (S1..S12) and Premium (P1..P15) tier sizes are available. "
            }
        },
        "postgresDbSku": {
            "type": "string",
            "defaultValue": "GP_Gen5_4",
            "allowedValues": [
                "GP_Gen5_2",
                "GP_Gen5_4",
                "GP_Gen5_8",
                "GP_Gen5_16",
                "GP_Gen5_32",
                "MO_Gen5_2",
                "MO_Gen5_4",
                "MO_Gen5_8",
                "MO_Gen5_16",
                "MO_Gen5_32"
            ],
            "metadata": {
                "description": "The SKU (stock keeping unit) name of the PostgresSQL instance. Follows the convention {pricing tier}{compute generation}{vCores} eg General Purpose, Generation 5, 4 cores is GP_Gen5_4."
            }
        },
        "postgresDbVersion": {
            "type": "string",
            "defaultValue": "9.6",
            "allowedValues": [
                "9.6",
                "10"
            ],
            "metadata": {
                "description": "The PostgresSQL DB version to use."
            }
        },
        "postgresDbStorage": {
            "type": "int",
            "defaultValue": 102400,
            "minValue": 102400,
            "maxValue": 4194304,
            "metadata": {
                "description": "The storage size of the PostgresSQL instance."
            }
        },
        "postgresDbCollation": {
            "type": "string",
            "defaultValue": "English_United States.1252",
            "metadata": {
                "description": "The collation of the PostgresSQL Managed Database."
            }
        },
        "clusterSize": {
            "type": "int",
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 3,
            "metadata": {
                "description": "The number of Crowd nodes in the cluster. Maximum is 6 nodes."
            }
        },
        "clusterVmSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_D64s_v3",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_F2s",
                "Standard_F4s",
                "Standard_F8s",
                "Standard_F16s",
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E32s_v3",
                "Standard_E64s_v3",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_L16s",
                "Standard_L32s"
            ],
            "metadata": {
                "description": "The size of the virtual machine used for each Crowd node. The virtual machine must have capacity for 8 or more premium LRS data disks."
            }
        },
        "appGtwyClusterSize": {
            "type": "int",
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 6,
            "metadata": {
                "description": "The number of nodes for the Application Gateway cluster"
            }
        },
        "appGtwyTier": {
            "type": "string",
            "allowedValues": [
                "Standard_Small",
                "Standard_Medium",
                "Standard_Large"
            ],
            "defaultValue": "Standard_Medium",
            "metadata": {
                "description": "The Application Gateway size."
            }
        },
        "vnetName": {
            "type": "string"
        },
        "appSubnetName": {
            "type": "string"
        },
        "gtwySubnetName": {
            "type": "string"
        },
        "jumpboxPublicIpAddress": {
            "type": "string"
        },
        "enableApplicationInsights": {
            "type": "bool",
            "defaultValue": true
        },
        "enableAnalytics": {
            "type": "bool",
            "defaultValue": true
        },
        "enableAcceleratedNetworking": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable accelerated networking? Needs to be a supported instance type."
            }
        },
        "workspaceSku": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Free",
                "PerNode",
                "Standalone",
                "Standard",
                "Premium",
                "Unlimited",
                "PerGB2018"
            ],
            "metadata": {
                "description": "Workspace SKU Pricing Tier. Options depend upon when Azure Subscription created. If after 2018, use 'PerGB2018' otherwise 'Free'."
            }
        },
        "sharedHomeSizeInGb": {
            "type": "string",
            "defaultValue": "1024",
            "metadata": {
                "description": "Shared Home File Share Size in GB"
            }
        },
        "clusterVmDiskSize": {
            "type": "int",
            "defaultValue": 1000,
            "metadata": {
                "description": "The desired size of the Cluster Node's allocation disk in GB"
            }
        },
        "clusterVmDiskCount": {
            "type": "int",
            "defaultValue": 8,
            "minValue": 8,
            "maxValue": 32,
            "metadata": {
                "description": "The requested Cluster Node disk will be striped for performance. Essentially the desired disk size will be divided by the clusterVmDiskCount and can't exceed 1023 GB. The clusterVmDiskCount count can't exceed the MaxDiskCount assigned to the VM Size."
            }
        },
        "linuxOsType": {
            "type": "string",
            "defaultValue": "Canonical:UbuntuServer:18.04-LTS",
            "allowedValues": [
                "Canonical:UbuntuServer:18.04-LTS",
                "Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2",
                "Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2",
                "RedHat:RHEL:7.5",
                "OpenLogic:CentOS:7.5",
                "credativ:Debian:9-backports"
            ],
            "metadata": {
                "description": "Select your preferred Linux OS type. Bear in mind, the Linux OS type has to support Accelerated Networking as well - https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-cli"
            }
        },
        "enablePremiumFiles": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Azure Premium Files."
            }
        },
        "jumpboxName": {
            "type": "string"
        }

    },
    "variables": {
        "namespace": "crd",
        "storage": {
            "name": "[concat(variables('namespace'), 'storage', uniqueString(resourceGroup().id))]",
            "premiumName": "[concat(variables('namespace'), 'prem', uniqueString(resourceGroup().id))]",
            "sharedHomeName": "[concat(variables('namespace'), '-shared-home')]",
            "diagnostics": "[concat(variables('namespace'), 'diag', uniqueString(resourceGroup().id))]"
        },
        "workspace": {
            "name": "[concat(variables('namespace'), '-omsworkspace-', uniqueString(resourceGroup().id))]"
        },
        "vaultName": "[concat(variables('namespace'), '-vault-', uniqueString(resourceGroup().id))]",
        "storageName": "[concat('Microsoft.Storage/storageAccounts/', if(parameters('enablePremiumFiles'), variables('storage').diagnostics, variables('storage').name))]",
        "gtwyIpName": "[concat(variables('namespace'), '-appgtwyip-', uniqueString(resourceGroup().id))]",
        "gtwyName": "[if(empty(parameters('sslBase64EncodedPfxCertificate')), concat(variables('namespace'), 'appgateway'), concat(variables('namespace'), 'appgateway-https'))]",
        "gtwyAddressPoolName": "[concat(variables('namespace'), 'appgwaddrpool')]",
        "dbTemplateUri": "[uri(parameters('_artifactsLocation'), concat(if(equals(parameters('dbType'),'sqlserver'),'nestedtemplates/azuredeploy-db-mssql.json','nestedtemplates/azuredeploy-db-postgres.json'), parameters('_artifactsLocationSasToken')))]",
        "byodbTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-db-byo.json', parameters('_artifactsLocationSasToken')))]",
        "appGtwyTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-crowd-gtwy.json', parameters('_artifactsLocationSasToken')))]",
        "vmssTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-crowd-vmss.json', parameters('_artifactsLocationSasToken')))]",
        "appInsightsTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-app-insights.json', parameters('_artifactsLocationSasToken')))]",
        "analyticsTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-analytics.json', parameters('_artifactsLocationSasToken')))]",
        "dbTemplate": "[if(equals(parameters('dbType'),'sqlserver'), 'sqlDbTemplate', 'postgresDbTemplate')]",
        "vaultTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-vault.json', parameters('_artifactsLocationSasToken')))]",
        "sharedHomeBackupTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-sharedhome-backup.json', parameters('_artifactsLocationSasToken')))]"
    },
    "resources": [
        {
            "name": "[variables('storage').name]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-09-01",
            "condition": "[not(parameters('enablePremiumFiles'))]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_GRS",
                "tier": "Standard"
            },
            "kind": "StorageV2"
        },
        {
            "name": "[variables('storage').diagnostics]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-09-01",
            "condition": "[parameters('enablePremiumFiles')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2"
        },
        {
            "name": "[variables('storage').premiumName]",
            "type": "Microsoft.Storage/storageAccounts",
            "comments": "Only have this resource in this template because not allowed to return keys/secrets in output pararms from nested templates.",
            "apiVersion": "2021-09-01",
            "condition": "[parameters('enablePremiumFiles')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "FileStorage",
            "properties": {
                "largeFileSharesState": "Enabled",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "name": "[concat(if(parameters('enablePremiumFiles'), variables('storage').premiumName, variables('storage').name), '/default')]",
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2021-09-01",
            "condition": "[parameters('enablePremiumFiles')]",
            "dependsOn": [
                "[variables('storage').premiumName]"
            ],
            "sku": {
                "name": "Premium_LRS"
            }
        },
        {
            "name": "[concat(if(parameters('enablePremiumFiles'), variables('storage').premiumName, variables('storage').name), '/default/', variables('storage').sharedHomeName)]",
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2021-04-01",
            "dependsOn": [
                "[variables('storage').name]",
                "[variables('storage').premiumName]"
            ],
            "properties": {
                "shareQuota": "[parameters('sharedHomeSizeInGb')]"
            }
        },
        {
            "name": "recoveryVaultTemplate",
            "apiVersion": "2021-04-01",
            "type": "Microsoft.Resources/deployments",
            "condition": "[parameters('enablePremiumFiles')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vaultTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vaultName": {
                        "value": "[variables('vaultName')]"
                    }
                }
            }
        },
        {
            "name": "sharedHomeBackupTemplate",
            "apiVersion": "2021-04-01",
            "type": "Microsoft.Resources/deployments",
            "condition": false,
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').premiumName)]",
                "recoveryVaultTemplate"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sharedHomeBackupTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vaultName": {
                        "value": "[variables('vaultName')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storage').premiumName]"
                    },
                    "sharedHomeName": {
                        "value": "[variables('storage').sharedHomeName]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[variables('workspace').name]",
            "condition": "[parameters('enableAnalytics')]",
            "apiVersion": "2021-06-01",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "[parameters('workspaceSku')]"
                }
            },
            "resources": [
                {
                    "apiVersion": "2020-08-01",
                    "type": "dataSources",
                    "name": "CrowdLogs",
                    "condition": "[parameters('enableAnalytics')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('workspace').name)]"
                    ],
                    "kind": "CustomLog",
                    "properties": {
                        "customLogName": "CrowdLogs",
                        "description": "Captures all Atlassian logs found at /var/atlassian/application-data/crowd/logs",
                        "inputs": [
                            {
                                "location": {
                                    "fileSystemLocations": {
                                        "linuxFileTypeLogPaths": [
                                            "/var/atlassian/application-data/crowd/logs/atlassian*.log"
                                        ]
                                    }
                                },
                                "recordDelimiter": {
                                    "regexDelimiter": {
                                        "pattern": "((\\d{2})|(\\d{4}))-([0-1]\\d)-(([0-3]\\d)|(\\d))\\s((\\d)|([0-1]\\d)|(2[0-4])):[0-5][0-9]:[0-5][0-9]",
                                        "matchIndex": 0,
                                        "matchIndexSpecified": true
                                    }
                                }
                            }
                        ],
                        "extractions": [
                            {
                                "extractionName": "TimeGenerated",
                                "extractionType": "DateTime",
                                "extractionProperties": {
                                    "dateTimeExtraction": {
                                        "regex": [
                                            {
                                                "matchIndex": 0,
                                                "pattern": "((\\d{2})|(\\d{4}))-([0-1]\\d)-(([0-3]\\d)|(\\d))\\s((\\d)|([0-1]\\d)|(2[0-4])):[0-5][0-9]:[0-5][0-9]"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    }
                },
                {
                    "apiVersion": "2020-08-01",
                    "type": "dataSources",
                    "name": "crowdLogCollection",
                    "condition": "[parameters('enableAnalytics')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('workspace').name)]"
                    ],
                    "kind": "CustomLogCollection",
                    "properties": {
                        "state": "LinuxLogsEnabled"
                    }
                }
            ]
        },
        {
            "apiVersion": "2021-04-01",
            "name": "sqlDbTemplate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[and(parameters('dbCreateNew'), equals(parameters('dbType'), 'sqlserver'))]",
            "dependsOn": [
                "[variables('workspace').name]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dbTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "dbServerName": {
                        "value": "[parameters('dbHost')]"
                    },
                    "dbDatabaseName": {
                        "value": "[parameters('dbDatabase')]"
                    },
                    "dbPassword": {
                        "value": "[parameters('dbPassword')]"
                    },
                    "dbUsername": {
                        "value": "[parameters('dbUsername')]"
                    },
                    "dbTier": {
                        "value": "[parameters('dbTier')]"
                    },
                    "dbTierSize": {
                        "value": "[parameters('dbTierSize')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "appSubnetName": {
                        "value": "[parameters('appSubnetName')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspace').name]"
                    },
                    "enableAnalytics": {
                        "value": "[parameters('enableAnalytics')]"
                    },
                    "jumpboxPublicIpAddress": {
                        "value": "[parameters('jumpboxPublicIpAddress')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "postgresDbTemplate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[and(parameters('dbCreateNew'), equals(parameters('dbType'), 'postgres'))]",
            "dependsOn": [
                "[variables('workspace').name]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dbTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "dbServerName": {
                        "value": "[parameters('dbHost')]"
                    },
                    "dbDatabaseName": {
                        "value": "[parameters('dbDatabase')]"
                    },
                    "dbUsername": {
                        "value": "[parameters('dbUsername')]"
                    },
                    "dbPassword": {
                        "value": "[parameters('dbPassword')]"
                    },
                    "postgresDbSku": {
                        "value": "[parameters('postgresDbSku')]"
                    },
                    "postgresDbVersion": {
                        "value": "[parameters('postgresDbVersion')]"
                    },
                    "postgresDbStorage": {
                        "value": "[parameters('postgresDbStorage')]"
                    },
                    "postgresDbCollation": {
                        "value": "[parameters('postgresDbCollation')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "appSubnetName": {
                        "value": "[parameters('appSubnetName')]"
                    },
                    "jumpboxPublicIpAddress": {
                        "value": "[parameters('jumpboxPublicIpAddress')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspace').name]"
                    },
                    "enableAnalytics": {
                        "value": "[parameters('enableAnalytics')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "byodbTemplate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[not(parameters('dbCreateNew'))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('byodbTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "dbType": {
                        "value": "[parameters('dbType')]"
                    },
                    "dbServerName": {
                        "value": "[parameters('dbHost')]"
                    },
                    "dbDatabaseName": {
                        "value": "[parameters('dbDatabase')]"
                    },
                    "dbPort": {
                        "value": "[parameters('dbPort')]"
                    },
                    "dbPassword": {
                        "value": "[parameters('dbPassword')]"
                    },
                    "dbUsername": {
                        "value": "[parameters('dbUsername')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "appSubnetName": {
                        "value": "[parameters('appSubnetName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2022-01-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('gtwyIpName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "idleTimeoutInMinutes": 4,
                "dnsSettings": {
                    "domainNameLabel": "[variables('gtwyIpName')]"
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "appGtwyTemplate",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[variables('workspace').name]",
                "[variables('gtwyIpName')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('appGtwyTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "gtwyIpName": {
                        "value": "[variables('gtwyIpName')]"
                    },
                    "gtwyName": {
                        "value": "[variables('gtwyName')]"
                    },
                    "gtwyAddressPoolName": {
                        "value": "[variables('gtwyAddressPoolName')]"
                    },
                    "appGtwyClusterSize": {
                        "value": "[parameters('appGtwyClusterSize')]"
                    },
                    "appGtwyTier": {
                        "value": "[parameters('appGtwyTier')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "gtwySubnetName": {
                        "value": "[parameters('gtwySubnetName')]"
                    },
                    "sslBase64EncodedPfxCertificate": {
                        "value": "[parameters('sslBase64EncodedPfxCertificate')]"
                    },
                    "sslPfxCertificatePassword": {
                        "value": "[parameters('sslPfxCertificatePassword')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspace').name]"
                    },
                    "enableAnalytics": {
                        "value": "[parameters('enableAnalytics')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "vmssTemplate",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[variables('storage').name]",
                "[variables('storage').premiumName]",
                "[variables('dbTemplate')]",
                "byodbTemplate",
                "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('workspace').name)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vmssTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "crowdVersion": {
                        "value": "[parameters('crowdVersion')]"
                    },
                    "appEndpoint": {
                        "value": "[if(not(empty(parameters('cname'))), parameters('cname'), reference(variables('gtwyIpName')).dnsSettings.fqdn)]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "clusterSize": {
                        "value": "[parameters('clusterSize')]"
                    },
                    "clusterVmSize": {
                        "value": "[parameters('clusterVmSize')]"
                    },
                    "sshKey": {
                        "value": "[parameters('sshKey')]"
                    },
                    "sshUserName": {
                        "value": "[parameters('sshUserName')]"
                    },
                    "dbCreateNew": {
                        "value": "[parameters('dbCreateNew')]"
                    },
                    "dbType": {
                        "value": "[parameters('dbType')]"
                    },
                    "dbTierSize": {
                        "value": "[parameters('dbTierSize')]"
                    },
                    "postgresDbSku": {
                        "value": "[parameters('postgresDbSku')]"
                    },
                    "dbPort": {
                        "value": "[parameters('dbPort')]"
                    },
                    "dbDatabase": {
                        "value": "[parameters('dbDatabase')]"
                    },
                    "dbUsername": {
                        "value": "[parameters('dbUsername')]"
                    },
                    "dbPassword": {
                        "value": "[parameters('dbPassword')]"
                    },
                    "dbHost": {
                        "value": "[parameters('dbHost')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "appSubnetName": {
                        "value": "[parameters('appSubnetName')]"
                    },
                    "appInsightsInstrumentKey": {
                        "value": "[if(parameters('enableApplicationInsights'), reference('appInsightsTemplate').outputs.instrumentkey.value, '')]"
                    },
                    "gtwyName": {
                        "value": "[variables('gtwyName')]"
                    },
                    "gtwyAddressPoolName": {
                        "value": "[variables('gtwyAddressPoolName')]"
                    },
                    "storageAccountName": {
                        "value": "[if(parameters('enablePremiumFiles'), variables('storage').premiumName, variables('storage').name)]"
                    },
                    "sharedHomeName": {
                        "value": "[variables('storage').sharedHomeName]"
                    },
                    "storageAccessKey": {
                        "value": "[if(parameters('enablePremiumFiles'), listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storage').premiumName), '2021-09-01').keys[0].value, listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storage').name), '2021-09-01').keys[0].value)]"
                    },
                    "storageFilesEndpoint": {
                        "value": "[if(parameters('enablePremiumFiles'), reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storage').premiumName), '2021-09-01').primaryEndpoints.file, reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storage').name), '2021-09-01').primaryEndpoints.file)]"
                    },
                    "enableAcceleratedNetworking": {
                        "value": "[parameters('enableAcceleratedNetworking')]"
                    },
                    "workspaceId": {
                        "value": "[if(parameters('enableAnalytics'), reference(variables('workspace').name).customerId, '')]"
                    },
                    "workspacePrimaryKey": {
                        "value": "[if(parameters('enableAnalytics'), listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('workspace').name), '2021-06-01').primarySharedKey, '')]"
                    },
                    "workspaceSecondaryKey": {
                        "value": "[if(parameters('enableAnalytics'), listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('workspace').name), '2021-06-01').secondarySharedKey, '')]"
                    },
                    "clusterVmDiskSize": {
                        "value": "[parameters('clusterVmDiskSize')]"
                    },
                    "clusterVmDiskCount": {
                        "value": "[parameters('clusterVmDiskCount')]"
                    },
                    "linuxOsType": {
                        "value": "[parameters('linuxOsType')]"
                    },
                    "diagnosticsBlobStorageUri": {
                        "value": "[reference(variables('storageName')).primaryEndpoints.blob]"
                    },
                    "sslBase64EncodedPfxCertificate": {
                        "value": "[parameters('sslBase64EncodedPfxCertificate')]"
                    },
                    "isMarketplaceDeployment": {
                        "value": "[parameters('isMarketplaceDeployment')]"
                    },
                    "jumpboxName": {
                        "value": "[parameters('jumpboxName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "appInsightsTemplate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[parameters('enableApplicationInsights')]",
            "dependsOn": [
                "[variables('workspace').name]",
                "[variables('dbTemplate')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('appInsightsTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2021-04-01",
            "name": "analyticsTemplate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[parameters('enableAnalytics')]",
            "dependsOn": [
                "[variables('workspace').name]",
                "[variables('dbTemplate')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('analyticsTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspace').name]"
                    },
                    "dbType": {
                        "value": "[parameters('dbType')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "jdbcUrl": {
            "type": "string",
            "value": "[if(parameters('dbCreateNew'), reference(variables('dbTemplate')).outputs.jdbcUrl.value, reference('byodbTemplate').outputs.jdbcUrl.value)]"
        },
        "crowdAppEndPoint": {
            "type": "string",
            "value": "[reference(variables('gtwyIpName')).dnsSettings.fqdn]"
        },
        "gtwyIpName": {
            "type": "string",
            "value": "[variables('gtwyIpName')]"
        },
        "gtwyName": {
            "type": "string",
            "value": "[variables('gtwyName')]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[if(parameters('enablePremiumFiles'),variables('storage').premiumName, variables('storage').name)]"
        },
        "clusterName": {
            "type": "string",
            "value": "[reference('vmssTemplate').outputs.clusterName.value]"
        },
        "appInsightsName": {
            "type": "string",
            "value": "[if(parameters('enableApplicationInsights'), reference('appInsightsTemplate').outputs.appInsightsName.value, '')]"
        },
        "dbDatabaseServerName": {
            "type": "string",
            "value": "[parameters('dbHost')]"
        },
        "dbDatabaseName": {
            "type": "string",
            "value": "[parameters('dbDatabase')]"
        }
    }
}
